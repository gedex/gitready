---
published: false
layout: post
title: staging area
category: beginner
---

Salah satu konsep penting di Git adalah <em>staging</em> area. Penggunaanya dapat mengubah cara kita bekerja, tentu untuk yang lebih baik! Mari kita lanjutkan untuk mengetahui bagaimana <em>staging</em> area bekerja dan apa yang perlu Anda ketahui untuk menggunakannya.

Pada kebanyakan sistem kontrol versi, terdapat 2 tempat untuk menaruh data: Kopian kerja Anda (direktori/berkas yang Anda gunakan) dan <em>datastore</em> (dimana sistem kontrol versi mengepak dan menyimpan setiap perubahan yang Anda lakukan). Dalam Git ada opsi ketiga: <em>staging</em> area (atau <em>index</em>). Tempat ini ibarat pelabuhan sebelum perubahan dikirim pergi.

p=. "!http://farm4.static.flickr.com/3259/2441544705_4c6f7e9b78.jpg!":http://flickr.com/photos/mundane_joy/2441544705/

Karena direktori kerja dan apa yang sudah tersimpan oleh Git itu tidak tergantung satu sama lain, <em>developer</em> dapat mengutak-atik <em>commit</em>, dan tidak seperti umumnya VCS memberitahu Anda. Karena ada lapisan yang memisahkan antara saat Git menyimpan data, Anda memiliki keuntungan fleksibilitas dan kontrol.

Menggunakan <em>index</em> cukup mudah dengan perintah @git add@ dan @git commit@. Pada dasarnya, Anda menambahkan (@add@) berkas ke <em>index</em>, dan saat sudah puas dengan perubahan, @commit@ perubahan tersebut:

p=. "!http://whygitisbetterthanx.com/images/index1.png!":http://whygitisbetterthanx.com/#the-staging-area

Saat perubahan sudah di dalam repositori, Anda dapat mem-@push@ ke lokasi <em>remote</em>, @merge@ ke branch lain, dan masih banyak lainnya. Ada juga aksi yang dapat dilakukan di <em>staging</em> area, seperti "menyimpan sementara perubahan":http://id.gitready.com/beginner/2009/01/10/stashing-your-changes.html.

Mari kita coba contoh sederhana menggunakan <em>staging</em> area. Saya baru saja melakukan perubahan:

<pre>
$ git status
  On branch master
  Changed but not updated:
    (use "git add <file>..." to update what will be committed)
 
      modified:   README.md
      modified:   about.html
 
  Untracked files:
    (use "git add <file>..." to include in what will be committed)
 
      help.txt
  no changes added to commit (use "git add" and/or "git commit -a")
</pre>

Jadi pada contoh ini terdapat 2 berkas yang Git sudah ketahui, dan satu yang belum: help.txt. Jika ditambahkan dengan @git add .@, maka semua yang memiliki perubahan dan juga berkas baru yang belum terjejak akan ditambahkan. Perintah @add@ belum menyimpan datanya, tapi hanya menempatkannya di pelabuhan, siap untuk diangkut @git commit@ berikutnya untuk dikirim pergi.

<pre>
$ git add .
$ git status
  On branch master
  Changes to be committed:
    (use "git reset HEAD <file>..." to unstage)
 
      modified:   README.md
      modified:   about.html
      new file:   help.txt
</pre>

Seperti yang tertera dilayar, Anda dapat menggunakan @git reset HEAD <file>@ untuk megembalikan berkas ke status <em>modified</em>. Dengan cara ini, Anda dapat mengatur @commit@ yang Anda inginkan. "Anda juga dapat meng-commit baris per baris jika diinginkan":http://id.gitready.com/advanced/2009/01/15/piecemeal-staging.html Jika Anda membayangkan cara untuk mengembalikkan files ke kondisi awal, "ada tip untuk hal itu.":http://id.gitready.com/beginner/2009/01/11/reverting-files.html Dari sini, @git commit@ akan memindahkan semua berkas ke <em>storage</em> Git!

<pre>
$ git commit -m "Adding stuff"
  Created commit e793200: Adding stuff
   2 files changed, 3 insertions(+), 0 deletions(-)
   create mode 100644 help.txt
</pre>

Jika Anda ingin mencari informasi lebih mengenai <em>index</em>, silahkan cek artikel berikut:

# "The Thing About Git":http://tomayko.com/writings/the-thing-about-git
# "Git Book - The Git Index":http://book.git-scm.com/1_the_git_index.html

Jika Anda memiliki sumber lain yang mejelaskan <em>index</em>, beritahu kami melalui komentar!
